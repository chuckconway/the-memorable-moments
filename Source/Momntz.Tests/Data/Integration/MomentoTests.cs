using System;
using System.Linq;
using Momntz.Domain.Model;
using Momntz.Infrastructure.Data.Command;
using NUnit.Framework;
using Raven.Client;
using Raven.Client.Document;

namespace Momntz.Tests.Data.Integration
{
    [TestFixture]
    public class MomentoTests
    {
        [Test]
        public void Momento_MarkCommentAsSpam_CorrectCommentIsMarkedAsSpamAndPersistedToDataStore()
        {
            IDocumentStore documentStore = GetRavenDb();
            IDocumentDatabase database = new RavenDb(documentStore);

            Momento momento = new Momento();
            string commentName = Guid.NewGuid().ToString();
            momento.AddComment(new Comment() { Author = commentName });

            database.Add(momento);
            database.Save();

            Momento momento2 = database.SingleOrDefault<Momento>(m => m.Id == momento.Id);
            Comment comment = momento2.Comments.Where(c => c.Author == commentName).SingleOrDefault();
            momento.MarkCommentAsSpam(comment.Id);

            database.Add(momento);
            database.Save();

            Momento momento3 = database.SingleOrDefault<Momento>(m => m.Id == momento.Id);
            Comment comment2 = momento3.Comments.Where(c => c.Author == commentName).SingleOrDefault();

            Assert.AreEqual(CommentStatus.Spam, comment2.Status);
        }

        [Test]
        public void Momento_AddComment_TheCommentSeedIdIsMaintained()
        {
            IDocumentStore documentStore = GetRavenDb();
            IDocumentDatabase database = new RavenDb(documentStore);

            Momento momento = new Momento();
            string commentName = Guid.NewGuid().ToString();
            momento.AddComment(new Comment { Author = commentName });

            string commentName2 = Guid.NewGuid().ToString();
            momento.AddComment(new Comment { Author = commentName2 });

            database.Add(momento);
            database.Save();

            Momento momento2 = database.SingleOrDefault<Momento>(m => m.Id == momento.Id);
            Comment comment = momento2.Comments.Where(c => c.Author == commentName2).SingleOrDefault();

            const int expectedAutoGeneratedId = 2;

            Assert.AreEqual(comment.Id, expectedAutoGeneratedId);
        }

        [Test]
        public void Momento_PeristRetrieveAddComment_TheCommentSeedIdIsMaintained()
        {
            IDocumentStore documentStore = GetRavenDb();
            IDocumentDatabase database = new RavenDb(documentStore);

            Momento momento = new Momento();
            string commentName = Guid.NewGuid().ToString();
            momento.AddComment(new Comment { Author = commentName });

            database.Add(momento);
            database.Save();

            Momento momento2 = database.SingleOrDefault<Momento>(m => m.Id == momento.Id);

            string commentName2 = Guid.NewGuid().ToString();
            Comment comment1 = new Comment {Author = commentName2};
            momento2.AddComment(comment1);

            const int expectedAutoGeneratedId = 2;

            Assert.AreEqual(comment1.Id, expectedAutoGeneratedId);
        }

        /// <summary>
        /// Gets the raven db.
        /// </summary>
        /// <returns></returns>
        private static IDocumentStore GetRavenDb()
        {
            var documentStore = new DocumentStore { Url = "http://localhost:8080" };
            return documentStore.Initialize();
        }
    }
}
